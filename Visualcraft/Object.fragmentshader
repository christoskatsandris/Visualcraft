#version 330 core

struct Light {
	vec4 La;
	vec4 Ld;
	vec4 Ls;
	vec3 lightPosition_worldspace;
	float power;
};

in vec4 vertex_position_worldspace;
in vec3 vertex_position_modelspace;
in vec3 vertex_position_cameraspace;
in vec3 vertex_normal_cameraspace;
in vec2 vertex_UV;
in vec4 vertex_position_lightspace;

out vec4 color;

uniform mat4 V;
uniform sampler2D textureAtlasSampler;
uniform sampler2D shadowMapSampler;
uniform int objectID;
uniform Light light;

float ShadowCalculation() {
    float shadow;

    // Perspective devide to bring coordinates in range[-1, 1]
    vec3 projCoords = vertex_position_lightspace.xyz / vertex_position_lightspace.w;

    // Since the depth map values are in range[0, 1]
    projCoords = projCoords * 0.5 + 0.5;

    // Sampling the closest point in this position from the depth map
    // REMINDER: Since we are in lightspace coordinates, the z parameter is the depth from the camera
    float closestDepth = texture(shadowMapSampler, projCoords.xy).r;

    // Then we get the depth of the current vertex
    float currentDepth = projCoords.z;

    // If the currentDepth is larger than the closestDepth, the fragment is shadowed
    // Correcting the quantization problem
    shadow = closestDepth + 0.005 > currentDepth ? 0.0f : 1.0f;

    // Make the shadow edges more realistic
    //shadow = 0.0;
    //vec2 depthMap_dimensions = textureSize(shadowMapSampler, 0);
    //vec2 texelSize = 1.0 / depthMap_dimensions;
    //for(int x = -1; x <= 1; x++ ){
    //    for(int y = -1; y <= 1; y++ ){
    //        float pcfDepth = texture(shadowMapSampler, projCoords.xy + vec2(x, y) * texelSize).r;
    //        shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0; 
    //    }
    //}
    //shadow /= 9.0;
    //
    //
    //if(projCoords.z > 1.0)
    //    shadow = 0.0;

    return shadow;
}

vec4 phong(float visibility, Light lightParam, vec4 chosenTexture) {
    vec4 _Ka = vec4(0.15 * chosenTexture.rgb, chosenTexture.a);
    vec4 _Kd = chosenTexture;
    vec4 _Ks = vec4(0.1, 0.1, 0.1, chosenTexture.a);
    float _Ns = 10;
    
    // model ambient intensity (Ia)
    vec4 Ia = lightParam.La * _Ka;

    // model diffuse intensity (Id)
    vec3 N = normalize(vertex_normal_cameraspace); 
    vec3 L = normalize((V * vec4(lightParam.lightPosition_worldspace, 1)).xyz - vertex_position_cameraspace);
    float cosTheta = clamp(dot(L, N), 0, 1);
    vec4 Id = lightParam.Ld * _Kd * cosTheta;

    // model specular intensity (Is)
    vec3 R = reflect(-L, N);
    vec3 E = normalize(- vertex_position_cameraspace);
    float cosAlpha = clamp(dot(E, R), 0, 1);
    float specular_factor = pow(cosAlpha, _Ns);
    vec4 Is = lightParam.Ls * _Ks * specular_factor;

    //model the light distance effect
    float distance = length(lightParam.lightPosition_worldspace - vertex_position_worldspace.xyz);
    float distance_sq = distance * distance;

    // final fragment color
    return vec4(
        Ia +
        visibility * Id * lightParam.power / distance_sq +
        visibility * Is * lightParam.power / distance_sq
    );
}

vec4 chooseTexture()
{
	vec4 chosenTexture;

	switch (objectID) {
		case 1: // Tree
			// Log
			if (vertex_position_modelspace.y < 0.495) {
				// Top face
				if (vertex_position_modelspace.y > 0.48) {
					chosenTexture = texture(textureAtlasSampler, vertex_UV + vec2(0.4f, 0.2f));
				}
				// Side or bottom faces
				else {
					chosenTexture = texture(textureAtlasSampler, vertex_UV + vec2(0.2f, 0.2f));
				}
			}
			// Leaves
			else {
				chosenTexture = texture(textureAtlasSampler, vertex_UV + vec2(0.6f, 0.2f));
			}
			break;

		case 2: // Rock
			chosenTexture = texture(textureAtlasSampler, vertex_UV + vec2(0.8f, 0.2f));
			break;

		case 3: // Dog
			chosenTexture = texture(textureAtlasSampler, vertex_UV + vec2(0.0f, 0.4f));
			break;

		default:
			break;
	}

	return chosenTexture;
}

void main() {
	color = phong(1, light, chooseTexture());
}