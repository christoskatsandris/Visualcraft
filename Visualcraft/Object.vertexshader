#version 330 core

layout(location = 0) in vec3 vertexPosition_modelspace;
layout(location = 1) in vec3 vertexNormal_modelspace;
layout(location = 2) in vec2 vertexUV;
layout(location = 3) in vec3 objectPositions;
layout(location = 4) in float heightMap;

out vec4 vertex_position_worldspace;
out vec3 vertex_position_modelspace;
out vec3 vertex_position_cameraspace;
out vec3 vertex_normal_cameraspace;
out vec2 vertex_UV;
out vec4 vertex_position_lightspace;

uniform mat4 M;
uniform mat4 V;
uniform mat4 P;
uniform mat4 lightVP;

uniform int objectID;

void main()
{
	vec4 coordinates_modelspace = vec4(vertexPosition_modelspace, 1.0);
	vertex_position_worldspace = M * coordinates_modelspace;

	switch (objectID) {
		case 1: // Tree
			vertex_position_worldspace += vec4(
				objectPositions.x - 2.0,
				-objectPositions.y - heightMap + 1.0,
				-objectPositions.z - 2.0,
				0.0
			);
			break;

		default: // Any other object
			vertex_position_worldspace += vec4(
				objectPositions.x,
				-objectPositions.y - heightMap + 1.0,
				-objectPositions.z,
				0.0
			);
			break;
	}

	vertex_position_modelspace = vec3(vertexPosition_modelspace);
	vertex_position_cameraspace = (V * vertex_position_worldspace).xyz;
	vertex_normal_cameraspace = (V * M * vec4(vertexNormal_modelspace, 0)).xyz;
	vertex_UV = vertexUV;
	vertex_position_lightspace = lightVP * vertex_position_worldspace;
	gl_Position = P * V * vertex_position_worldspace;
}